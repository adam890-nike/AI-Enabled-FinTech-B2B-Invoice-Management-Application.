{"ast":null,"code":"var _jsxFileName = \"D:\\\\highradius\\\\HRC\\\\HRC123-front_end\\\\src\\\\component\\\\table\\\\InvoiceList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Checkbox, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel, Typography } from \"@mui/material\";\nimport getDataObject from \"../crudOperations/dataObjectTemplate\";\n\nfunction InvoiceList(_ref) {\n  var _this = this;\n\n  var rows = _ref.rows,\n      selectedRows = _ref.selectedRows,\n      setSelectedRows = _ref.setSelectedRows,\n      numSelectedRows = _ref.numSelectedRows,\n      setNumSelectedRows = _ref.setNumSelectedRows,\n      activeSortColumn = _ref.activeSortColumn,\n      setActiveSortColumn = _ref.setActiveSortColumn,\n      sortDirection = _ref.sortDirection,\n      setSortDirection = _ref.setSortDirection;\n  // columns to show\n  var column_name = getDataObject(); // handles click on row ( only tableBody )\n\n  var handleClick = function handleClick(id, index) {\n    if (selectedRows[\"sl_no_\".concat(id)]) {\n      delete selectedRows[\"sl_no_\".concat(id)];\n      setNumSelectedRows(numSelectedRows <= 1 ? 0 : numSelectedRows - 1);\n    } else {\n      selectedRows[\"sl_no_\".concat(id)] = rows[index];\n      setNumSelectedRows(numSelectedRows + 1);\n    }\n  }; // handles (select-deselect All) checkbox clicks\n\n\n  var handleCheckboxClick = function handleCheckboxClick() {\n    if (numSelectedRows > 0) {\n      setSelectedRows({});\n      setNumSelectedRows(0);\n    } else {\n      rows.forEach(function (item) {\n        return selectedRows[\"sl_no_\".concat(item.sl_no)] = item;\n      });\n      setNumSelectedRows(rows.length);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableContainer, {\n    sx: {\n      maxHeight: \"480px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    padding: \"checkbox\",\n    sx: {\n      backgroundColor: function backgroundColor(theme) {\n        return theme.palette.background.paper;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    indeterminate: numSelectedRows > 0 && numSelectedRows < rows.length,\n    checked: numSelectedRows > 0 && numSelectedRows === rows.length,\n    onClick: handleCheckboxClick,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 33\n    }\n  })), column_name.map(function (column, index) {\n    if (column.show) return /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      key: column.key,\n      sx: {\n        backgroundColor: function backgroundColor(theme) {\n          return theme.palette.background.paper;\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TableSortLabel, {\n      onClick: function onClick() {\n        activeSortColumn === column.key ? setSortDirection(\"\".concat(sortDirection === \"asc\" ? \"desc\" : \"asc\")) : setActiveSortColumn(column.key);\n      },\n      active: column.key === activeSortColumn,\n      direction: sortDirection,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 45\n      }\n    }, column.name));\n    return null;\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, rows.map(function (row, index) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      key: index,\n      role: \"checkbox\",\n      onClick: function onClick() {\n        handleClick(row[\"sl_no\"], index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      role: \"checkbox\",\n      padding: \"checkbox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      checked: selectedRows[\"sl_no_\".concat(row.sl_no)] ? true : false,\n      size: \"small\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 41\n      }\n    })), column_name.map(function (column) {\n      var key = column.key;\n      if (column.show) return /*#__PURE__*/React.createElement(TableCell, {\n        align: \"right\",\n        variant: \"body\",\n        key: key,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        noWrap: true,\n        variant: \"body2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 53\n        }\n      }, row[key]));\n      return null;\n    }));\n  })))));\n}\n\nexport default InvoiceList;","map":{"version":3,"sources":["D:/highradius/HRC/HRC123-front_end/src/component/table/InvoiceList.js"],"names":["React","useState","useEffect","Checkbox","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableSortLabel","Typography","getDataObject","InvoiceList","rows","selectedRows","setSelectedRows","numSelectedRows","setNumSelectedRows","activeSortColumn","setActiveSortColumn","sortDirection","setSortDirection","column_name","handleClick","id","index","handleCheckboxClick","forEach","item","sl_no","length","maxHeight","backgroundColor","theme","palette","background","paper","map","column","show","key","name","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TableSortLabel,\r\n    Typography,\r\n} from \"@mui/material\";\r\n\r\nimport getDataObject from \"../crudOperations/dataObjectTemplate\";\r\n\r\nfunction InvoiceList({\r\n    rows,\r\n    selectedRows,\r\n    setSelectedRows,\r\n    numSelectedRows,\r\n    setNumSelectedRows,\r\n    activeSortColumn,\r\n    setActiveSortColumn,\r\n    sortDirection,\r\n    setSortDirection,\r\n}) {\r\n    // columns to show\r\n    const column_name = getDataObject();\r\n\r\n    // handles click on row ( only tableBody )\r\n    const handleClick = (id, index) => {\r\n        if (selectedRows[`sl_no_${id}`]) {\r\n            delete selectedRows[`sl_no_${id}`];\r\n            setNumSelectedRows(numSelectedRows <= 1 ? 0 : numSelectedRows - 1);\r\n        } else {\r\n            selectedRows[`sl_no_${id}`] = rows[index];\r\n            setNumSelectedRows(numSelectedRows + 1);\r\n        }\r\n    };\r\n\r\n    // handles (select-deselect All) checkbox clicks\r\n    const handleCheckboxClick = () => {\r\n        if (numSelectedRows > 0) {\r\n            setSelectedRows({});\r\n            setNumSelectedRows(0);\r\n        } else {\r\n            rows.forEach(\r\n                (item) => (selectedRows[`sl_no_${item.sl_no}`] = item)\r\n            );\r\n            setNumSelectedRows(rows.length);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TableContainer sx={{ maxHeight: \"480px\" }}>\r\n                <Table stickyHeader size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell\r\n                                padding=\"checkbox\"\r\n                                sx={{\r\n                                    backgroundColor: (theme) =>\r\n                                        theme.palette.background.paper,\r\n                                }}\r\n                            >\r\n                                <Checkbox\r\n                                    indeterminate={\r\n                                        numSelectedRows > 0 &&\r\n                                        numSelectedRows < rows.length\r\n                                    }\r\n                                    checked={\r\n                                        numSelectedRows > 0 &&\r\n                                        numSelectedRows === rows.length\r\n                                    }\r\n                                    onClick={handleCheckboxClick}\r\n                                    size=\"small\"\r\n                                ></Checkbox>\r\n                            </TableCell>\r\n                            {column_name.map((column, index) => {\r\n                                if (column.show)\r\n                                    return (\r\n                                        <TableCell\r\n                                            align=\"right\"\r\n                                            key={column.key}\r\n                                            sx={{\r\n                                                backgroundColor: (theme) =>\r\n                                                    theme.palette.background\r\n                                                        .paper,\r\n                                            }}\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                onClick={() => {\r\n                                                    activeSortColumn ===\r\n                                                    column.key\r\n                                                        ? setSortDirection(\r\n                                                              `${\r\n                                                                  sortDirection ===\r\n                                                                  \"asc\"\r\n                                                                      ? \"desc\"\r\n                                                                      : \"asc\"\r\n                                                              }`\r\n                                                          )\r\n                                                        : setActiveSortColumn(\r\n                                                              column.key\r\n                                                          );\r\n                                                }}\r\n                                                active={\r\n                                                    column.key ===\r\n                                                    activeSortColumn\r\n                                                }\r\n                                                direction={sortDirection}\r\n                                            >\r\n                                                {column.name}\r\n                                            </TableSortLabel>\r\n                                        </TableCell>\r\n                                    );\r\n\r\n                                return null;\r\n                            })}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/* \r\n                            Table Body\r\n                        */}\r\n                        {rows.map((row, index) => {\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    key={index}\r\n                                    role=\"checkbox\"\r\n                                    onClick={() => {\r\n                                        handleClick(row[\"sl_no\"], index);\r\n                                    }}\r\n                                >\r\n                                    <TableCell\r\n                                        role={\"checkbox\"}\r\n                                        padding=\"checkbox\"\r\n                                    >\r\n                                        <Checkbox\r\n                                            checked={\r\n                                                selectedRows[\r\n                                                    `sl_no_${row.sl_no}`\r\n                                                ]\r\n                                                    ? true\r\n                                                    : false\r\n                                            }\r\n                                            size=\"small\"\r\n                                        ></Checkbox>\r\n                                    </TableCell>\r\n                                    {column_name.map((column) => {\r\n                                        let key = column.key;\r\n                                        if (column.show)\r\n                                            return (\r\n                                                <TableCell\r\n                                                    align=\"right\"\r\n                                                    variant=\"body\"\r\n                                                    key={key}\r\n                                                >\r\n                                                    <Typography\r\n                                                        noWrap\r\n                                                        variant={\"body2\"}\r\n                                                    >\r\n                                                        {row[key]}\r\n                                                    </Typography>\r\n                                                </TableCell>\r\n                                            );\r\n\r\n                                        return null;\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InvoiceList;\r\n"]},"metadata":{},"sourceType":"module"}