{"ast":null,"code":"import _toConsumableArray from \"D:\\\\highradius\\\\HRC\\\\HRC123-front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\highradius\\\\HRC\\\\HRC123-front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\highradius\\\\HRC\\\\HRC123-front_end\\\\src\\\\component\\\\options\\\\Add.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { Alert, Button, Container, Grid, Snackbar, TextField, Typography } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport theme from \"../../style/theme\";\nimport DatePick from \"./Datepicker\";\nimport getDataObject from \"../crudOperations/dataObjectTemplate\";\nvar gridTheme = createTheme({\n  components: {\n    MuiGrid: {\n      defaultProps: {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 3\n      }\n    }\n  }\n}, theme);\nvar dataObj = getDataObject(); // ----------- Component ------------ //\n\nvar AddInvoice = function AddInvoice(_ref) {\n  var onAddClick = _ref.onAddClick,\n      onCancelClick = _ref.onCancelClick;\n\n  // invalid fields array\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      invalidFields = _useState2[0],\n      setInvalidFields = _useState2[1]; //flag for failure alert (invalid fields)\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      failure = _useState4[0],\n      setFailure = _useState4[1]; // runs one time only ( when component mounts on screen )\n  // set all the column value to null\n\n\n  useEffect(function () {\n    dataObj = getDataObject();\n  }, []); // validates the data and sets the flag for success or failure\n  // this function gets invoked on Add button (onClick)\n\n  var validateData = function validateData() {\n    var newInvalid = [];\n    dataObj.forEach(function (column) {\n      if (column.show && column.key !== \"sl_no\" && column.key !== \"aging_bucket\") {\n        if (!column.value) {\n          if (invalidFields.indexOf(column.key) === -1 && column.key !== \"clear_date\") {\n            newInvalid.push(column.key);\n          }\n        } else {\n          if (column.key === \"total_open_amount\") {\n            var regex = new RegExp(/[^0-9.]/, \"g\");\n\n            if (column.value.match(regex) && invalidFields.indexOf(column.key) === -1) {\n              newInvalid.push(column.key);\n            }\n          }\n\n          if (column.key === \"buisness_year\") {\n            var _regex = new RegExp(/\\d\\d\\d\\d/);\n\n            if (!column.value.match(_regex) && invalidFields.indexOf(column.key) === -1) {\n              newInvalid.push(column.key);\n            }\n          }\n\n          if (column.key === \"cust_number\" || column.key === \"posting_id\" || column.key === \"invoice_id\") {\n            var _regex2 = new RegExp(/[0-9]/);\n\n            if (!column.value.match(_regex2) && invalidFields.indexOf(column.key) === -1) {\n              newInvalid.push(column.key);\n            }\n          }\n        }\n      }\n    });\n    newInvalid = newInvalid.concat(invalidFields);\n    setInvalidFields(newInvalid);\n\n    if (invalidFields.length > 0 || newInvalid.length > 0) {\n      setFailure(true);\n    } else {\n      onAddClick(dataObj);\n    }\n  }; // removes given column from invalid field array\n\n\n  var removeColumn = function removeColumn(column) {\n    var newInvalid = _toConsumableArray(invalidFields);\n\n    newInvalid = newInvalid.filter(function (element) {\n      if (element === column) {\n        setFailure(false);\n        return false;\n      }\n\n      return true;\n    });\n    setInvalidFields(newInvalid);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    sx: {\n      mt: 2,\n      mb: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    sx: {\n      mb: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"* Required Fields\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: gridTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, dataObj.map(function (column) {\n    if (column.show && column.key !== \"sl_no\" && column.key != \"aging_bucket\") {\n      return /*#__PURE__*/React.createElement(Grid, {\n        key: column.key,\n        item: true,\n        sx: {\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 37\n        }\n      }, column.type === \"string\" ? /*#__PURE__*/React.createElement(TextField, {\n        error: invalidFields.indexOf(column.key) !== -1 ? true : false,\n        label: column.name,\n        onChange: function onChange(e) {\n          column.value = e.target.value;\n          removeColumn(column.key);\n        },\n        defaultValue: \"\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(TextField, {\n        type: \"date\",\n        error: invalidFields.indexOf(column.key) !== -1 ? true : false,\n        value: column.value ? column.value : \"2000-01-01\",\n        label: column.name,\n        onChange: function onChange(e) {\n          column.value = e.target.value;\n          removeColumn(column.key);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 45\n        }\n      }));\n    } else return null;\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: validateData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, \"Add\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: function onClick() {\n      onCancelClick();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 25\n    }\n  }, \"Cancel\")))), /*#__PURE__*/React.createElement(Snackbar, {\n    open: failure,\n    autoHideDuration: 2300,\n    message: \"Test\",\n    onClose: function onClose() {\n      return setFailure(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    severity: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, \"Make sure to enter all the details correctly\")));\n};\n\nexport default AddInvoice;","map":{"version":3,"sources":["D:/highradius/HRC/HRC123-front_end/src/component/options/Add.js"],"names":["React","useEffect","useState","Alert","Button","Container","Grid","Snackbar","TextField","Typography","createTheme","ThemeProvider","theme","DatePick","getDataObject","gridTheme","components","MuiGrid","defaultProps","xs","sm","md","lg","dataObj","AddInvoice","onAddClick","onCancelClick","invalidFields","setInvalidFields","failure","setFailure","validateData","newInvalid","forEach","column","show","key","value","indexOf","push","regex","RegExp","match","concat","length","removeColumn","filter","element","mt","mb","map","display","flexDirection","type","name","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    Alert,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    Snackbar,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\nimport theme from \"../../style/theme\";\r\nimport DatePick from \"./Datepicker\";\r\n\r\nimport getDataObject from \"../crudOperations/dataObjectTemplate\";\r\n\r\nconst gridTheme = createTheme(\r\n    {\r\n        components: {\r\n            MuiGrid: {\r\n                defaultProps: {\r\n                    xs: 12,\r\n                    sm: 6,\r\n                    md: 4,\r\n                    lg: 3,\r\n                },\r\n            },\r\n        },\r\n    },\r\n    theme\r\n);\r\n\r\nlet dataObj = getDataObject();\r\n\r\n// ----------- Component ------------ //\r\nconst AddInvoice = ({ onAddClick, onCancelClick }) => {\r\n    // invalid fields array\r\n    const [invalidFields, setInvalidFields] = useState([]);\r\n\r\n    //flag for failure alert (invalid fields)\r\n    const [failure, setFailure] = useState(false);\r\n\r\n    // runs one time only ( when component mounts on screen )\r\n    // set all the column value to null\r\n    useEffect(() => {\r\n        dataObj = getDataObject();\r\n    }, []);\r\n\r\n    // validates the data and sets the flag for success or failure\r\n    // this function gets invoked on Add button (onClick)\r\n    const validateData = () => {\r\n        let newInvalid = [];\r\n        dataObj.forEach((column) => {\r\n            if (column.show && column.key !== \"sl_no\" && column.key !== \"aging_bucket\") {\r\n                if (!column.value) {\r\n                    if (\r\n                        invalidFields.indexOf(column.key) === -1 &&\r\n                        column.key !== \"clear_date\"\r\n                    ) {\r\n                        newInvalid.push(column.key);\r\n                    }\r\n                } else {\r\n                    if (column.key === \"total_open_amount\") {\r\n                        const regex = new RegExp(/[^0-9.]/, \"g\");\r\n                        if (\r\n                            column.value.match(regex) &&\r\n                            invalidFields.indexOf(column.key) === -1\r\n                        ) {\r\n                            newInvalid.push(column.key);\r\n                        }\r\n                    }\r\n\r\n                    if (column.key === \"buisness_year\") {\r\n                        const regex = new RegExp(/\\d\\d\\d\\d/);\r\n                        if (\r\n                            !column.value.match(regex) &&\r\n                            invalidFields.indexOf(column.key) === -1\r\n                        ) {\r\n                            newInvalid.push(column.key);\r\n                        }\r\n                    }\r\n\r\n                    if (\r\n                        column.key === \"cust_number\" ||\r\n                        column.key === \"posting_id\" ||\r\n                        column.key === \"invoice_id\"\r\n                    ) {\r\n                        const regex = new RegExp(/[0-9]/);\r\n                        if (\r\n                            !column.value.match(regex) &&\r\n                            invalidFields.indexOf(column.key) === -1\r\n                        ) {\r\n                            newInvalid.push(column.key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        newInvalid = newInvalid.concat(invalidFields);\r\n        setInvalidFields(newInvalid);\r\n\r\n        if (invalidFields.length > 0 || newInvalid.length > 0) {\r\n            setFailure(true);\r\n        } else {\r\n            onAddClick(dataObj);\r\n        }\r\n    };\r\n\r\n    // removes given column from invalid field array\r\n    const removeColumn = (column) => {\r\n        let newInvalid = [...invalidFields];\r\n        newInvalid = newInvalid.filter((element) => {\r\n            if (element === column) {\r\n                setFailure(false);\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        setInvalidFields(newInvalid);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container sx={{ mt: 2, mb: 2 }}>\r\n                <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n                    * Required Fields\r\n                </Typography>\r\n\r\n                {/* Fields */}\r\n\r\n                <Grid container spacing={4}>\r\n                    <ThemeProvider theme={gridTheme}>\r\n                        {dataObj.map((column) => {\r\n                            if (column.show && column.key !== \"sl_no\" && column.key != \"aging_bucket\") {\r\n                                return (\r\n                                    <Grid\r\n                                        key={column.key}\r\n                                        item\r\n                                        sx={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: \"column\",\r\n                                        }}\r\n                                    >\r\n                                        {column.type === \"string\" ? (\r\n                                            <TextField\r\n                                                error={\r\n                                                    invalidFields.indexOf(\r\n                                                        column.key\r\n                                                    ) !== -1\r\n                                                        ? true\r\n                                                        : false\r\n                                                }\r\n                                                label={column.name}\r\n                                                onChange={(e) => {\r\n                                                    column.value =\r\n                                                        e.target.value;\r\n                                                    removeColumn(column.key);\r\n                                                }}\r\n                                                defaultValue=\"\"\r\n                                            />\r\n                                        ) : (\r\n                                            <TextField\r\n                                                type=\"date\"\r\n                                                error={\r\n                                                    invalidFields.indexOf(\r\n                                                        column.key\r\n                                                    ) !== -1\r\n                                                        ? true\r\n                                                        : false\r\n                                                }\r\n                                                value={\r\n                                                    column.value\r\n                                                        ? column.value\r\n                                                        : \"2000-01-01\"\r\n                                                }\r\n                                                label={column.name}\r\n                                                onChange={(e) => {\r\n                                                    column.value =\r\n                                                        e.target.value;\r\n                                                    removeColumn(column.key);\r\n                                                }}\r\n                                            />\r\n                                        )}\r\n                                    </Grid>\r\n                                );\r\n                            } else return null;\r\n                        })}\r\n                    </ThemeProvider>\r\n                </Grid>\r\n\r\n                {/* Buttons */}\r\n\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <button className=\"btn\" onClick={validateData}>\r\n                            Add\r\n                        </button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <button\r\n                            className=\"btn\"\r\n                            onClick={() => {\r\n                                onCancelClick();\r\n                            }}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n\r\n            {/* ********** */}\r\n            <Snackbar\r\n                open={failure}\r\n                autoHideDuration={2300}\r\n                message=\"Test\"\r\n                onClose={() => setFailure(false)}\r\n            >\r\n                <Alert severity=\"error\">\r\n                    Make sure to enter all the details correctly\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddInvoice;\r\n"]},"metadata":{},"sourceType":"module"}